/* The following code was generated by JFlex 1.7.0 */

//package JFlex;

import java.util.*;
//import java.util.HashMap;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>parser.flex</tt>
 */
class Parser {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EGAL = 2;
  public static final int INIT_VARS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\27\4\0\1\30"+
    "\1\0\1\20\1\21\1\0\1\27\1\33\2\0\1\27\1\5\11\4"+
    "\1\0\1\32\1\0\1\17\1\27\42\0\1\14\3\6\1\12\1\13"+
    "\1\6\1\24\1\22\2\6\1\15\1\6\1\31\3\6\1\10\1\16"+
    "\1\7\1\11\1\6\1\23\3\6\1\25\1\0\1\26\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\2\4\4\5\1\6\1\7"+
    "\1\10\2\5\1\11\1\12\1\13\1\1\1\14\6\15"+
    "\1\16\3\5\1\17\2\5\3\15\1\17\2\15\3\5"+
    "\1\20\1\5\3\15\1\20\1\15\1\21\1\22\1\5"+
    "\1\21\1\22\1\15\2\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[60];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\34\0\70\0\124\0\160\0\124\0\124\0\214"+
    "\0\124\0\250\0\304\0\340\0\374\0\124\0\124\0\124"+
    "\0\u0118\0\u0134\0\124\0\124\0\124\0\u0150\0\124\0\u016c"+
    "\0\u0188\0\u01a4\0\u01c0\0\u01dc\0\u01f8\0\124\0\u0214\0\u0230"+
    "\0\u024c\0\250\0\u0268\0\u0284\0\u02a0\0\u02bc\0\u02d8\0\u016c"+
    "\0\u02f4\0\u0310\0\u032c\0\u0348\0\u0364\0\250\0\u0380\0\u039c"+
    "\0\u03b8\0\u03d4\0\u016c\0\u03f0\0\250\0\250\0\u040c\0\u016c"+
    "\0\u016c\0\u0428\0\250\0\u016c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[60];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\12\1\14\1\15\3\12\1\16\1\17\1\20\1\21"+
    "\1\22\1\12\1\23\1\24\1\25\1\26\1\12\3\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\2\12"+
    "\1\14\1\15\3\12\1\16\1\17\1\20\1\21\1\22"+
    "\1\12\1\23\1\24\1\25\1\26\1\12\1\27\2\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\30\1\31\2\30"+
    "\1\32\1\33\3\30\1\16\1\17\1\20\1\34\1\35"+
    "\1\30\1\23\1\24\1\25\1\26\1\30\1\36\1\7"+
    "\36\0\1\6\35\0\2\10\34\0\11\12\3\0\3\12"+
    "\4\0\1\12\10\0\2\12\1\37\6\12\3\0\3\12"+
    "\4\0\1\12\10\0\7\12\1\40\1\12\3\0\3\12"+
    "\4\0\1\12\10\0\6\12\1\41\2\12\3\0\3\12"+
    "\4\0\1\12\10\0\5\12\1\42\3\12\3\0\3\12"+
    "\4\0\1\43\10\0\11\12\3\0\2\12\1\44\4\0"+
    "\1\12\32\0\1\25\11\0\11\30\3\0\3\30\4\0"+
    "\1\30\10\0\2\30\1\45\6\30\3\0\3\30\4\0"+
    "\1\30\10\0\7\30\1\46\1\30\3\0\3\30\4\0"+
    "\1\30\10\0\6\30\1\47\2\30\3\0\3\30\4\0"+
    "\1\30\10\0\5\30\1\50\3\30\3\0\3\30\4\0"+
    "\1\51\10\0\11\30\3\0\2\30\1\52\4\0\1\30"+
    "\10\0\3\12\1\53\5\12\3\0\3\12\4\0\1\12"+
    "\10\0\10\12\1\54\3\0\3\12\4\0\1\12\10\0"+
    "\7\12\1\55\1\12\3\0\3\12\4\0\1\12\10\0"+
    "\1\12\1\56\7\12\3\0\3\12\4\0\1\12\10\0"+
    "\11\12\3\0\1\57\2\12\4\0\1\12\10\0\3\30"+
    "\1\60\5\30\3\0\3\30\4\0\1\30\10\0\10\30"+
    "\1\61\3\0\3\30\4\0\1\30\10\0\7\30\1\62"+
    "\1\30\3\0\3\30\4\0\1\30\10\0\1\30\1\63"+
    "\7\30\3\0\3\30\4\0\1\30\10\0\11\30\3\0"+
    "\1\64\2\30\4\0\1\30\10\0\4\12\1\65\4\12"+
    "\3\0\3\12\4\0\1\12\10\0\4\12\1\66\4\12"+
    "\3\0\3\12\4\0\1\12\10\0\10\12\1\53\3\0"+
    "\3\12\4\0\1\12\10\0\7\12\1\67\1\12\3\0"+
    "\3\12\4\0\1\12\10\0\4\30\1\70\4\30\3\0"+
    "\3\30\4\0\1\30\10\0\4\30\1\71\4\30\3\0"+
    "\3\30\4\0\1\30\10\0\10\30\1\60\3\0\3\30"+
    "\4\0\1\30\10\0\7\30\1\72\1\30\3\0\3\30"+
    "\4\0\1\30\10\0\4\12\1\73\4\12\3\0\3\12"+
    "\4\0\1\12\10\0\4\30\1\74\4\30\3\0\3\30"+
    "\4\0\1\30\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1092];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\2\11\1\1\1\11\4\1\3\11"+
    "\2\1\3\11\1\1\1\11\6\1\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[60];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  	private HashMap<String, Integer> vars = new HashMap<String, Integer>();

  	private Stack<String> operators = new Stack<String>();
  	private LinkedList<ValueNode> values = new LinkedList<ValueNode>();
  	private LinkedList<LinkedList<Node>> sequences = new LinkedList<LinkedList<Node>>();
  	private HashMap<String, Integer> priority = new HashMap<String, Integer>();
  	private ValueNode variable_to_assign;
  	private LinkedList<String> conditions = new LinkedList<String>();
  	private int line = 1;
  	private MainNode main_node;

  	void init()
  	{
  		priority.put("&&",1);
  		priority.put("!", 2);
  		priority.put(">", 3);
  		priority.put("+", 4);
  		priority.put("/", 5);
  		sequences.addLast(new LinkedList<Node>());
  	}

  	void make_value_node(String op)
  	{
  		switch(op)
		{
			case "+":
			{
				ValueNode n2 = values.removeLast();
				ValueNode n1 = values.removeLast();
				values.addLast(new PlusNode(n1, n2));
				break;
			}
			case "/":
			{
				ValueNode n2 = values.removeLast();
				ValueNode n1 = values.removeLast();
				values.addLast(new DivNode(n1, n2, yyline + 1));
				break;
			}
			case "&&":
			{
				ValueNode n2 = values.removeLast();
				ValueNode n1 = values.removeLast();
				values.addLast(new AndNode(n1, n2));
				break;
			}
			case "!":
			{
				ValueNode n1 = values.removeLast();
				values.addLast(new NotNode(n1));
				break;
			}
			case ">":
			{
				ValueNode n2 = values.removeLast();
				ValueNode n1 = values.removeLast();
				values.addLast(new GreaterNode(n1, n2));
				break;
			}
		}
  	}

  	class UnassignedVarException extends RuntimeException
  	{
  		UnassignedVarException(int line)
  		{
  			super("UnassignedVar " + line);
  		}
  	}

  	class DivideByZeroException extends RuntimeException
  	{
  		DivideByZeroException(int line)
  		{
  			super("DivideByZero " + line);
  		}
  	}


  	interface IsValueNode
  	{
  		String get_value();
  	}


  	abstract class Node
  	{
  		int nivelIden;
  		Node()
  		{

  		}
  		void set_nivelIden(int nivelIden)
  		{
  			this.nivelIden = nivelIden;
  		}

  		void get_UnassignedVarException() throws UnassignedVarException
  		{

  		}

  		String get_name()
  		{
  			return null;
  		}

  		abstract void eval();
  	}


  	abstract class ValueNode extends Node implements IsValueNode
  	{

  	}


  	class MainNode extends Node
  	{
  		private Node node;

  		MainNode(Node node)
  		{
  			super();
  			this.node = node;
  			this.set_nivelIden(0);
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			try{
  				node.eval();
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			node.get_UnassignedVarException();
  		}

  		@Override
  		public String toString()
  		{
  			node.set_nivelIden(1);
  			return "<MainNode>" + "\n" + node.toString();
  		}
  	}

  	class AssignmentNode extends Node
  	{
  		private ValueNode var;
  		private ValueNode expr;
  		private int line;

  		AssignmentNode(ValueNode var, ValueNode expr, int line)
  		{
  			super();
  			this.var = var;
  			this.expr = expr;
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			var.get_UnassignedVarException();
  			expr.get_UnassignedVarException();
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			try{
  				if(vars.containsKey(var.get_name()))
  				{
  					vars.put(var.get_name(), Integer.valueOf(expr.get_value()));
  				}
  				else
  				{
  					throw new UnassignedVarException(line);
  				}
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			var.set_nivelIden(nivelIden + 1);
  			expr.set_nivelIden(nivelIden + 1);
  			for(int i = 0; i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<AssignmentNode> =" + "\n" + var.toString() + expr.toString();
  		}
  	} 


  	class IfNode extends Node
  	{

  		private ValueNode test;
  		private Node then;
  		private Node altfel;

  		IfNode(ValueNode test, Node then, Node altfel)
  		{
  			super();
  			this.test = test;
  			this.then = then;
  			this.altfel = altfel;
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			test.get_UnassignedVarException();
  			then.get_UnassignedVarException();
  			altfel.get_UnassignedVarException();
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			try{
  				if(Boolean.valueOf(test.get_value()))
  				{
  					then.eval();
  				}
  				else
  				{
  					altfel.eval();
  				}
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			test.set_nivelIden(nivelIden + 1);
  			then.set_nivelIden(nivelIden + 1);
  			altfel.set_nivelIden(nivelIden + 1);
  			for(int i = 0; i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<IfNode> if" + "\n" + test.toString() + then.toString() + altfel.toString();
  		}
  	}


  	class WhileNode extends Node
  	{
  		private ValueNode test;
  		private Node then;

  		WhileNode(ValueNode test, Node then)
  		{
  			super();
  			this.test = test;
  			this.then = then;
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			test.get_UnassignedVarException();
  			then.get_UnassignedVarException();
  		}


  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			try
  			{
	  			while(Boolean.valueOf(test.get_value()))
  				{
  					then.eval();
  				}
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			test.set_nivelIden(nivelIden + 1);
  			then.set_nivelIden(nivelIden + 1);
  			for(int i = 0; i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<WhileNode> while" + "\n" + test.toString() + then.toString();
  		}
  	}


  	class SequenceNode extends Node
  	{
  		private Node n1, n2;

  		SequenceNode(Node n1, Node n2)
  		{	
  			super();
  			this.n1 = n1;
  			this.n2 = n2;
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			n1.get_UnassignedVarException();
  			n2.get_UnassignedVarException();
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			try
  			{
  				n1.eval();
  				n2.eval();
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString() 
  		{
  			String to_ret = "";
  			n1.set_nivelIden(nivelIden + 1);
  			n2.set_nivelIden(nivelIden + 1);
  			for(int i = 0; i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<SequenceNode>" + "\n" + n1.toString() + n2.toString();
  		}
  	}


  	class BlockNode extends Node
  	{
  		private Node node;

  		BlockNode (Node node)
  		{
  			super();
  			this.node = node;
  		}

  		@Override
		void eval() throws UnassignedVarException, DivideByZeroException
		{
  			try
  			{
  				if(node != null)
  					node.eval();
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			if(node != null)
  				node.get_UnassignedVarException();
  		}  		

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0; i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			if(node != null)
  			{
  				node.set_nivelIden(nivelIden + 1);
  				return to_ret + "<BlockNode> {}" + "\n" + node.toString();
  			}
  			return to_ret + "<BlockNode> {}" + "\n";
  		}
  	}


  	class BracketNode extends ValueNode
  	{
  		private ValueNode node;

  		BracketNode(ValueNode node)
  		{
  			super();
  			this.node = node;
  		}

  		@Override
		void eval() throws UnassignedVarException, DivideByZeroException
		{
  			
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			node.get_UnassignedVarException();
  		}


  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			try{
  				return node.get_value();
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}

  		}

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}

  			node.set_nivelIden(nivelIden + 1);

  			return to_ret + "<BracketNode> ()" + "\n" + node.toString();
  		}
  	}

  	class NotNode extends ValueNode
  	{
  		private ValueNode node;

  		NotNode(ValueNode node)
  		{
  			super();
  			this.node = node;
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			node.get_UnassignedVarException();
  		}


  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			try{
  			return String.valueOf((!(Boolean.valueOf(node.get_value()))));
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}

  			node.set_nivelIden(nivelIden + 1);

  			return to_ret + "<NotNode> !" + "\n" + node.toString();
  		}
  	}

  	class AndNode extends ValueNode
  	{
  		private ValueNode t1;
  		private ValueNode t2;

  		AndNode(ValueNode t1, ValueNode t2)
  		{
  			super();
  			this.t1 = t1;
  			this.t2 = t2;
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			t1.get_UnassignedVarException();
  			t2.get_UnassignedVarException();
  		}


  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			try
  			{
  				return String.valueOf( Boolean.valueOf(t1.get_value()) && Boolean.valueOf(t2.get_value()));
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}

  			t1.set_nivelIden(nivelIden + 1);
  			t2.set_nivelIden(nivelIden + 1);

  			return to_ret + "<AndNode> &&" + "\n" + t1.toString() + t2.toString();
  		}
  	}

  	class GreaterNode extends ValueNode
  	{
  		private ValueNode t1;
  		private ValueNode t2;

  		GreaterNode(ValueNode t1, ValueNode t2)
  		{
  			super();
  			this.t1 = t1;
  			this.t2 = t2;
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			t1.get_UnassignedVarException();
  			t2.get_UnassignedVarException();
  		}


  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			try
  			{
  				return String.valueOf(Integer.valueOf(t1.get_value()) > Integer.valueOf(t2.get_value()));
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}


  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}

  			t1.set_nivelIden(nivelIden + 1);
  			t2.set_nivelIden(nivelIden + 1);

  			return to_ret + "<GreaterNode> >" + "\n" + t1.toString() + t2.toString();
  		}
  	}


  	class PlusNode extends ValueNode
  	{
  		private ValueNode t1;
  		private ValueNode t2;

  		PlusNode(ValueNode t1, ValueNode t2)
  		{
  			super();
  			this.t1 = t1;
  			this.t2 = t2;
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			t1.get_UnassignedVarException();
  			t2.get_UnassignedVarException();
  		}


  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			try
  			{
  				return String.valueOf(Integer.valueOf(t1.get_value()) + Integer.valueOf(t2.get_value()));
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  		}

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}

  			t1.set_nivelIden(nivelIden + 1);
  			t2.set_nivelIden(nivelIden + 1);

  			return to_ret + "<PlusNode> +" + "\n" + t1.toString() + t2.toString();
  		}
  	}

  	class DivNode extends ValueNode
  	{
  		private ValueNode t1;
  		private ValueNode t2;
  		private int line;

  		DivNode(ValueNode t1, ValueNode t2, int line)
  		{
  			super();
  			this.t1 = t1;
  			this.t2 = t2;
  			this.line = line;
  		}

  		@Override 
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
  			t1.get_UnassignedVarException();
  			t2.get_UnassignedVarException();
  		}


  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			try
  			{	if(Integer.valueOf(t2.get_value()) != 0)
  					return String.valueOf(Integer.valueOf(t1.get_value()) / Integer.valueOf(t2.get_value()));
  				throw new DivideByZeroException(line);
  			}
  			catch(UnassignedVarException e)
  			{
  				throw e;
  			}
  			catch(DivideByZeroException e)
  			{
  				throw e;
  			}
  		}

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}

  			t1.set_nivelIden(nivelIden + 1);
  			t2.set_nivelIden(nivelIden + 1);

  			return to_ret + "<DivNode> /" + "\n" + t1.toString() + t2.toString();
  		}
  	}


  	class VarNode extends ValueNode
  	{
  		private String variable;
  		private int line;

  		VarNode(String variable, int line)
  		{
  			super();
  			this.variable = variable;
  			this.line = line;
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		void get_UnassignedVarException() throws UnassignedVarException
  		{
			if(!vars.containsKey(variable))
				throw new UnassignedVarException(line);
	  	}


  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			if(vars.get(variable) != null)
  				return String.valueOf(vars.get(variable));
  			throw new UnassignedVarException(line);
  		}

  		@Override
  		String get_name()
  		{
  			return variable;
  		}

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<VariableNode> " + variable + "\n";
  		}
  	}


  	class IntNode extends ValueNode
  	{
  		private String value;

  		IntNode(String value)
  		{
  			super();
  			this.value = value;
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			return value;
  		}

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<IntNode> " + value + "\n";
  		}
  	}

  	class BoolNode extends ValueNode
  	{
  		private Boolean value;

  		BoolNode(Boolean value)
  		{
  			super();
  			this.value = value;
  		}

  		@Override
  		void eval() throws UnassignedVarException, DivideByZeroException
  		{
  			
  		}

  		@Override
  		public String get_value() throws UnassignedVarException, DivideByZeroException
  		{
  			return String.valueOf(value);
  		}

  		@Override
  		public String toString()
  		{
  			String to_ret = "";
  			for(int i = 0 ;i < nivelIden; i++)
  			{
  				to_ret += "\t";
  			}
  			return to_ret + "<BoolNode> " + value + "\n";
  		}
  	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Parser(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                LinkedList<Node> seq = sequences.pop();
			int n = seq.size();
			boolean error = false;
			if(n == 1)
			{
				main_node = new MainNode(seq.pop());
			}

			if(n >= 2)
			{
				Node n2 = seq.removeLast();
				Node n1 = seq.removeLast();
				SequenceNode last = new SequenceNode(n1, n2);
				for(int i = 1; i < n -1; i++)
				{
					n1 = seq.removeLast();
					last = new SequenceNode(n1, last);
				}
				main_node = new MainNode(last);
				
			}
			BufferedWriter arbore = new BufferedWriter(new FileWriter("arbore"));
			BufferedWriter output = new BufferedWriter(new FileWriter("output"));
			arbore.write(main_node.toString());
			arbore.close();
			try{
				main_node.get_UnassignedVarException();
				main_node.eval();
			}
			catch(UnassignedVarException e)
			{
				output.write(e.getMessage());
				output.newLine();
				output.close();
				error = true;
			}
			catch(DivideByZeroException e)
			{
				output.write(e.getMessage());
				output.newLine();
				output.close();
				error = true;
			}

			if(!error)
			{
				Iterator<Map.Entry<String, Integer>> it = vars.entrySet().iterator();
				while(it.hasNext())
				{
					Map.Entry<String, Integer> temp = it.next();
					output.write(temp.getKey() + "=" + temp.getValue());
					output.newLine();
				}
				output.close();
			}
			return 0;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            } 
            // fall through
          case 20: break;
          case 2: 
            { line++;
            } 
            // fall through
          case 21: break;
          case 3: 
            { 
            } 
            // fall through
          case 22: break;
          case 4: 
            { values.addLast(new IntNode(yytext()));
            } 
            // fall through
          case 23: break;
          case 5: 
            { values.addLast(new VarNode(yytext(), yyline + 1));
            } 
            // fall through
          case 24: break;
          case 6: 
            { operators.push("=");
				variable_to_assign = values.pollLast();
				yybegin(EGAL);
            } 
            // fall through
          case 25: break;
          case 7: 
            { operators.push("(");
            } 
            // fall through
          case 26: break;
          case 8: 
            { String op;
			while(!operators.peek().equals("("))
			{
				op = operators.pop();
				make_value_node(op);
			}
			operators.pop();
			values.addLast(new BracketNode(values.removeLast()));
            } 
            // fall through
          case 27: break;
          case 9: 
            { sequences.addLast(new LinkedList<Node>());
            } 
            // fall through
          case 28: break;
          case 10: 
            { LinkedList<Node> comenzi = sequences.removeLast();
			int n = comenzi.size();
			if(n == 0)
			sequences.peekLast().addLast(new BlockNode(null));
			if(n == 1)
			{
				sequences.peekLast().addLast(new BlockNode(comenzi.removeLast()));
			}
			if(n >= 2)
			{
				Node n2 = comenzi.removeLast();
				Node n1 = comenzi.removeLast();
				SequenceNode last = new SequenceNode(n1, n2);
				for(int i = 1 ; i < n - 1 ;i++)
				{
					last = new SequenceNode(comenzi.removeLast(), last);
				}
				sequences.peekLast().addLast(new BlockNode(last));
			}
			String conditie = conditions.peekLast();
			if(conditie.equals("else"))
			{
				conditions.removeLast();
				// Ar trebui sa fie mereu un if aici
				conditions.removeLast();
				Node altfel = sequences.peekLast().removeLast();
				Node then = sequences.peekLast().removeLast();
				sequences.peekLast().addLast(new IfNode(values.removeLast(), then, altfel));
			}
			if(conditie.equals("while"))
			{
				conditions.removeLast();
				sequences.peekLast().addLast(new WhileNode(values.removeLast(), sequences.peekLast().removeLast()));
			}
            } 
            // fall through
          case 29: break;
          case 11: 
            { int prior1 = priority.get(yytext());

			while(!operators.empty() && !operators.peek().equals("(") && !operators.peek().equals("="))
			{
				String op = operators.pop();
				int prior2 = priority.get(op);
				if(prior2 >= prior1)
				{
					make_value_node(op);
				}
				else
				{
					operators.push(op);
					break;
				}
			}
			operators.push(yytext());
            } 
            // fall through
          case 30: break;
          case 12: 
            { String op;
			while(!((op = operators.pop()).equals("=")))
			{
				make_value_node(op);
			}

			sequences.peekLast().addLast(new AssignmentNode(variable_to_assign, values.pollLast(), yyline + 1));
			yybegin(YYINITIAL);
            } 
            // fall through
          case 31: break;
          case 13: 
            { vars.put(yytext(), null);
            } 
            // fall through
          case 32: break;
          case 14: 
            { init();
						yybegin(YYINITIAL);
            } 
            // fall through
          case 33: break;
          case 15: 
            { conditions.addLast("if");
            } 
            // fall through
          case 34: break;
          case 16: 
            { yybegin(INIT_VARS);
            } 
            // fall through
          case 35: break;
          case 17: 
            { values.addLast(new BoolNode(Boolean.valueOf(yytext())));
            } 
            // fall through
          case 36: break;
          case 18: 
            { conditions.addLast("else");
            } 
            // fall through
          case 37: break;
          case 19: 
            { conditions.addLast("while");
            } 
            // fall through
          case 38: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Parser [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Parser scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Parser(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
